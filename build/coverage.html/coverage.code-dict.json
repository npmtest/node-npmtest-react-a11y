{"/home/travis/build/npmtest/node-npmtest-react-a11y/test.js":"/* istanbul instrument in package npmtest_react_a11y */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-a11y/lib.npmtest_react_a11y.js":"/* istanbul instrument in package npmtest_react_a11y */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_a11y = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_a11y = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-a11y/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-a11y && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_a11y */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_a11y\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_a11y.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_a11y.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_a11y.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_a11y.__dirname + '/lib.npmtest_react_a11y.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-a11y/node_modules/react-a11y/dist/index.js":"'use strict';\n\nvar assign = require('object.assign');\nvar assertions = require('./assertions');\nvar after = require('./after');\n\nvar shouldRunTest = function shouldRunTest(testName, options) {\n  var exclude = options.exclude || [];\n\n  if (options.device == 'mobile') {\n    exclude = exclude.concat(assertions.mobileExclusions);\n  }\n\n  return exclude.indexOf(testName) == -1;\n};\n\nvar runTagTests = function runTagTests(tagName, props, children, options, onFailure) {\n  var key;\n  var tagTests = assertions.tags[tagName] || [];\n\n  for (key in tagTests) {\n    var testFailed = shouldRunTest(key, options) && !tagTests[key].test(tagName, props, children);\n\n    if (tagTests[key] && testFailed) onFailure(tagName, props, tagTests[key].msg);\n  }\n};\n\nvar runPropTests = function runPropTests(tagName, props, children, options, onFailure) {\n  var key;\n  var propTests;\n\n  for (var propName in props) {\n    if (props[propName] === null || props[propName] === undefined) continue;\n\n    propTests = assertions.props[propName] || [];\n\n    for (key in propTests) {\n      var testTailed = shouldRunTest(key, options) && !propTests[key].test(tagName, props, children);\n\n      if (propTests[key] && testTailed) onFailure(tagName, props, propTests[key].msg);\n    }\n  }\n};\n\nvar runLabelTests = function runLabelTests(tagName, props, children, options, onFailure) {\n  var key;\n  var renderTests = assertions.render;\n\n  for (key in renderTests) {\n    if (shouldRunTest(key, options) && renderTests[key]) {\n      var failureCB = onFailure.bind(undefined, tagName, props, renderTests[key].msg);\n\n      renderTests[key].test(tagName, props, children, failureCB);\n    }\n  }\n};\n\nvar runTests = function runTests(tagName, props, children, options, onFailure) {\n  var tests = [runTagTests, runPropTests, runLabelTests];\n  tests.map(function (test) {\n    test(tagName, props, children, options, onFailure);\n  });\n};\n\nvar shouldShowError = function shouldShowError(failureInfo, options) {\n  var filterFn = options.filterFn;\n  if (filterFn) return filterFn(failureInfo.tagName, failureInfo.id);\n\n  return true;\n};\n\nvar throwError = function throwError(failureInfo, options) {\n  if (!shouldShowError(failureInfo, options)) return;\n\n  var error = [failureInfo.tagName, failureInfo.msg];\n\n  if (options.includeSrcNode) error.push(failureInfo.id);\n\n  throw new Error(error.join(' '));\n};\n\nvar logAfterRender = function logAfterRender(component, log) {\n  after(component, 'componentDidMount', log);\n  after(component, 'componentDidUpdate', log);\n};\n\nvar logWarning = function logWarning(component, failureInfo, options) {\n  var includeSrcNode = options.includeSrcNode;\n\n  var warn = function warn() {\n    if (!shouldShowError(failureInfo, options)) return;\n\n    var warning = [failureInfo.tagName, failureInfo.msg];\n\n    if (includeSrcNode && component) {\n      // TODO:\n      // 1) Consider using ReactDOM.findDOMNode() over document.getElementById\n      //    https://github.com/reactjs/react-a11y/issues/54\n      // 2) Consider using ref to expand element element reference logging\n      //    to all element (https://github.com/reactjs/react-a11y/issues/55)\n      var srcNode = document.getElementById(failureInfo.id);\n\n      // Guard against logging null element references should render()\n      // return null or false.\n      // https://facebook.github.io/react/docs/component-api.html#getdomnode\n      if (includeSrcNode === \"asString\") warning.push(\"Source Node: \" + srcNode.outerHTML);else if (srcNode) warning.push(srcNode);\n    }\n    console.warn.apply(console, warning);\n  };\n\n  if (includeSrcNode && component && component._instance)\n    // Cannot log a node reference until the component is in the DOM,\n    // so defer the document.getElementById call until componentDidMount\n    // or componentDidUpdate.\n    logAfterRender(component._instance, warn);else warn();\n};\n\nvar handleFailure = function handleFailure(options, reactEl, type, props, failureMsg) {\n  var includeSrcNode = options && (options.includeSrcNode || false);\n  var warningPrefix = options && options.warningPrefix || '';\n  var reactComponent = reactEl._owner;\n\n  // If a Component instance, use the component's name,\n  // if a ReactElement instance, use the tag name + id (e.g. div#foo)\n  var name = reactComponent && reactComponent.getName() || type + '#' + props.id;\n\n  var failureInfo = {\n    'tagName': name,\n    'id': props.id,\n    'msg': warningPrefix + failureMsg\n  };\n\n  var notifyOpts = {\n    'includeSrcNode': includeSrcNode,\n    'filterFn': options && options.filterFn\n  };\n\n  if (options && options['throw']) throwError(failureInfo, notifyOpts);else logWarning(reactComponent, failureInfo, notifyOpts);\n};\n\nvar _createElement;\n\nvar createId = (function () {\n  var nextId = 0;\n  return function (props) {\n    return props.id || 'a11y-' + nextId++;\n  };\n})();\n\nvar React = undefined;\n\nvar reactA11y = function reactA11y(_React) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n  var ReactDOM = options.ReactDOM;\n\n  React = _React;\n\n  if (!React && !React.createElement) {\n    throw new Error('Missing parameter: React');\n  }\n\n  assertions.setReact(React, ReactDOM);\n\n  _createElement = React.createElement;\n\n  React.createElement = function (type, _props) {\n    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      children[_key - 2] = arguments[_key];\n    }\n\n    var props = _props || {};\n\n    var childrenForTest;\n\n    if (children.length === 0) {\n      childrenForTest = props.children || [];\n    } else {\n      childrenForTest = children;\n    }\n\n    var newProps = assign({}, props, { id: createId(props) });\n    var reactEl = _createElement.apply(undefined, [type, newProps].concat(children));\n    var failureCB = handleFailure.bind(undefined, options, reactEl);\n\n    if (typeof type === 'string') runTests(type, newProps, childrenForTest, options, failureCB);\n\n    return reactEl;\n  };\n};\n\nreactA11y.restoreAll = function () {\n  React.createElement = _createElement;\n  after.restorePatchedMethods();\n};\n\nmodule.exports = reactA11y;","/home/travis/build/npmtest/node-npmtest-react-a11y/node_modules/react-a11y/dist/assertions.js":"'use strict';\n\nvar after = require('./after');\n\nvar React;\nvar ReactDOM;\n\nexports.setReact = function (_React, _ReactDOM) {\n  React = _React;\n  ReactDOM = _ReactDOM || React;\n};\n\nvar INTERACTIVE = {\n  'button': true,\n  'input': function input(props) {\n    return props.type != 'hidden';\n  },\n  'textarea': true,\n  'select': true,\n  'option': true,\n  'a': function a(props) {\n    var hasHref = typeof props.href === 'string';\n    var hasTabIndex = props.tabIndex != null;\n    return hasHref || !hasHref && hasTabIndex;\n  }\n};\n\nvar presentationRoles = ['presentation', 'none'];\n\nvar isHiddenFromAT = function isHiddenFromAT(props) {\n  return props['aria-hidden'] == 'true';\n};\n\nvar hasAlt = function hasAlt(props) {\n  return typeof props.alt === 'string';\n};\n\nvar isInteractive = function isInteractive(tagName, props) {\n  var tag = INTERACTIVE[tagName];\n  return typeof tag === 'function' ? tag(props) : tag;\n};\n\nvar getComponents = function getComponents(children) {\n  var childComponents = [];\n  React.Children.forEach(children, function (child) {\n    if (child && typeof child.type === 'function') childComponents.push(child);\n  });\n  return childComponents;\n};\n\nvar hasLabel = function hasLabel(node) {\n  var text = node.tagName.toLowerCase() == 'img' ? node.alt : node.textContent;\n  var hasTextContent = text.trim().length > 0;\n\n  var images = node.querySelectorAll('img[alt]');\n  images = Array.prototype.slice.call(images);\n\n  var hasAltText = images.filter(function (image) {\n    return image.alt.length > 0;\n  }).length > 0;\n\n  return hasTextContent || hasAltText;\n};\n\nvar assertLabel = function assertLabel(node, context, failureCB) {\n  if (context.passed) return;\n\n  context.passed = hasLabel(node);\n\n  if (!context.passed && context.totalChildren == ++context.childrenTested) failureCB();\n};\n\nvar hasChildTextNode = function hasChildTextNode(props, children, failureCB) {\n  var hasText = false;\n  var childComponents = getComponents(children);\n  var nChildComponents = childComponents.length;\n  var hasChildComponents = nChildComponents > 0;\n  var nCurrentComponent = 0;\n  var context;\n\n  if (hasChildComponents) context = { totalChildren: childComponents.length, childrenTested: 0 };\n\n  React.Children.forEach(children, function (child) {\n    if (hasText) return;else if (child === null) return;else if (typeof child === 'undefined') return;else if (typeof child === 'string' || typeof child === 'number') hasText = true;else if (child.type === 'img' && child.props.alt) hasText = true;else if (child.props && child.props.children) hasText = hasChildTextNode(child.props, child.props.children, failureCB);else if (typeof child.type === 'function') {\n      // There can be false negatives if one of the children is a Component,\n      // as Components' children are inaccessible until it's is rendered.\n      // To account for this, check each Component's HTML after it's\n      // been mounted.\n      after(child.type.prototype, 'componentDidMount', function () {\n        assertLabel(ReactDOM.findDOMNode(this), context, failureCB);\n      });\n\n      // Return true because the label check is now going to be async\n      // (due to the componentDidMount listener) and we want to avoid\n      // pre-maturely calling the failure callback.\n      hasText = nChildComponents == ++nCurrentComponent;\n    }\n  });\n  return hasText;\n};\n\nexports.mobileExclusions = ['NO_TABINDEX', 'BUTTON_ROLE_SPACE', 'BUTTON_ROLE_ENTER', 'TABINDEX_REQUIRED_WHEN_ARIA_HIDDEN'];\n\nexports.props = {\n  onClick: {\n    NO_ROLE: {\n      msg: 'You have a click handler on a non-interactive element but no `role` DOM property. It will be unclear what this element is supposed to do to a screen-reader user. http://www.w3.org/TR/wai-aria/roles#role_definitions',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props)) return true;\n\n        return !(!isInteractive(tagName, props) && !props.role);\n      }\n    },\n\n    NO_TABINDEX: {\n      msg: 'You have a click handler on a non-interactive element but no `tabIndex` DOM property. The element will not be navigable or interactive by keyboard users. http://www.w3.org/TR/wai-aria-practices/#focus_tabindex',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props)) return true;\n\n        return !(!isInteractive(tagName, props) && props.tabIndex == null) // tabIndex={0} is valid\n        ;\n      }\n    },\n\n    BUTTON_ROLE_SPACE: {\n      msg: 'You have `role=\"button\"` but did not define an `onKeyDown` handler. Add it, and have the \"Space\" key do the same thing as an `onClick` handler.',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props)) return true;\n\n        return !(props.role === 'button' && !props.onKeyDown);\n      }\n    },\n\n    BUTTON_ROLE_ENTER: {\n      msg: 'You have `role=\"button\"` but did not define an `onKeyDown` handler. Add it, and have the \"Enter\" key do the same thing as an `onClick` handler.',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props)) return true;\n\n        return !(props.role === 'button' && !props.onKeyDown);\n      }\n    }\n  },\n\n  'aria-hidden': {\n    'TABINDEX_REQUIRED_WHEN_ARIA_HIDDEN': {\n      msg: 'You have `aria-hidden=\"true\"` applied to an interactive element but have not removed it from the tab flow. This could result in a hidden tab stop for users of screen readers.',\n      test: function test(tagName, props, children) {\n        return !((isInteractive(tagName, props) || tagName == 'a' && !props.href) && props['aria-hidden'] == 'true' && props.tabIndex != '-1');\n      }\n    }\n  }\n};\n\nexports.tags = {\n  a: {\n    HASH_HREF_NEEDS_BUTTON: {\n      msg: 'You have an anchor with `href=\"#\"` and no `role` DOM property. Add `role=\"button\"` or better yet, use a `<button/>`.',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props)) return true;\n\n        return !(!props.role && props.href === '#');\n      }\n    },\n    TABINDEX_NEEDS_BUTTON: {\n      msg: 'You have an anchor with a tabIndex, no `href` and no `role` DOM property. Add `role=\"button\"` or better yet, use a `<button/>`.',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props)) return true;\n\n        return !(!props.role && props.tabIndex != null && !props.href);\n      }\n    }\n  },\n\n  img: {\n    MISSING_ALT: {\n      msg: 'You forgot an `alt` DOM property on an image. Screen-reader users will not know what it is.',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props)) return true;\n\n        return hasAlt(props);\n      }\n    },\n\n    REDUNDANT_ALT: {\n      // TODO: have some way to set localization strings to match against\n      msg: 'Screen-readers already announce `img` tags as an image, you don\\'t need to use the word \"image\" or \"picture\" in the description',\n      test: function test(tagName, props, children) {\n        if (isHiddenFromAT(props) || !hasAlt(props)) return true;\n\n        return !(props.alt.match('image') || props.alt.match('picture'));\n      }\n    }\n  }\n};\n\nexports.render = {\n  NO_LABEL: {\n    msg: 'You have an unlabeled element or control. Add `aria-label` or `aria-labelledby` attribute, or put some text in the element.',\n    test: function test(tagName, props, children, failureCB) {\n      if (isHiddenFromAT(props) || presentationRoles.indexOf(props.role) !== -1) return;\n\n      if (!(isInteractive(tagName, props) || tagName == 'a' && !props.href || props.role)) return;\n\n      var failed = !(props['aria-label'] || props['aria-labelledby'] || tagName === 'img' && props.alt || hasChildTextNode(props, children, failureCB));\n\n      if (failed) failureCB();\n    }\n  }\n\n};","/home/travis/build/npmtest/node-npmtest-react-a11y/node_modules/react-a11y/dist/after.js":"\"use strict\";\n\nvar restoreFunctions = [];\n\nvar after = function after(host, name, cb) {\n  var originalFn = host[name];\n  var restoreFn = undefined;\n\n  if (originalFn) {\n    host[name] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      originalFn.apply(this, args);\n      cb.apply(this, args);\n    };\n    restoreFn = function () {\n      return host[name] = originalFn;\n    };\n  } else {\n    host[name] = function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      cb.apply(this, args);\n    };\n    restoreFn = function () {\n      return delete host[name];\n    };\n  }\n\n  restoreFunctions.push(restoreFn);\n};\n\nafter.restorePatchedMethods = function () {\n  restoreFunctions.forEach(function (restoreFn) {\n    return restoreFn();\n  });\n  restoreFunctions = [];\n};\n\nmodule.exports = after;"}